<?xml version="1.0" encoding="utf-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
<j:new var="h" className="hudson.Functions" />

  <l:layout norefresh="true" css="/plugin/workflow-puppet-enterprise/css/hiera.css">
    <st:bind value="${it.deleteScope}" var="backend"/>
    <l:header>
    </l:header>
    <st:include page="sidepanel.jelly" />
    <l:main-panel>
      <script type="text/javascript" src="${rootURL}/plugin/workflow-puppet-enterprise/js/run_prettify.js?lang=yaml&amp;lan=groovy&amp;skin=sunburst"></script>
      <script>
        function confirmDeleteScope(scope) {
          var scopeDiv = document.getElementById(scope);
          var backend = <st:bind value="${it}"/>
          backend.deleteScope(scope);
          scopeDiv.hide();
        }

        function cancelDeleteScope(scope) {
          var scopeDiv = document.getElementById(scope);
          var scopeRemoveButton = document.getElementById(scope + "-remove-button");
          var scopeConfirmButton = document.getElementById(scope + "-confirm-button");
          var scopeCancelButton = document.getElementById(scope + "-cancel-button");

          scopeDiv.style.backgroundColor = 'inherit';
          scopeDiv.style.textDecoration = 'inherit';
          scopeRemoveButton.show();
          scopeConfirmButton.hide();
          scopeCancelButton.hide();
        }

        function deleteScope(scope) {
          var scopeDiv = document.getElementById(scope);
          var scopeRemoveButton = document.getElementById(scope + "-remove-button");
          var scopeConfirmButton = document.getElementById(scope + "-confirm-button");
          var scopeCancelButton = document.getElementById(scope + "-cancel-button");

          console.log(scope + "-remove-button");
          scopeDiv.style.backgroundColor = '#fbc1c1';

          scopeRemoveButton.hide();
          scopeConfirmButton.style.display = "inline";
          scopeConfirmButton.style.color = "red";
          scopeCancelButton.style.display = "inline";
        }

        function confirmDeleteKey(key, scope) {
          var scopeKey = document.getElementById(scope + "-" + key);
          var backend = <st:bind value="${it}"/>
          backend.deleteKey(key, scope);
          scopeKey.hide();
        }

        function cancelDeleteKey(key, scope) {
          var scopeKey = document.getElementById(scope + "-" + key);
          var scopeKeyRemoveButton = document.getElementById(scope + "-" + key + "-remove-button");
          var scopeKeyConfirmButton = document.getElementById(scope + "-" + key + "-confirm-button");
          var scopeKeyCancelButton = document.getElementById(scope + "-" + key + "-cancel-button");

          scopeKey.style.backgroundColor = 'inherit';
          scopeKey.style.textDecoration = 'inherit';
          scopeKeyRemoveButton.show();
          scopeKeyConfirmButton.hide();
          scopeKeyCancelButton.hide();
        }

        function deleteKey(key, scope) {
          var scopeKey = document.getElementById(scope + "-" + key);
          var scopeKeyRemoveButton = document.getElementById(scope + "-" + key + "-remove-button");
          var scopeKeyConfirmButton = document.getElementById(scope + "-" + key + "-confirm-button");
          var scopeKeyCancelButton = document.getElementById(scope + "-" + key + "-cancel-button");

          scopeKey.style.backgroundColor = '#fbc1c1';

          scopeKeyRemoveButton.hide();
          scopeKeyConfirmButton.style.display = "inline";
          scopeKeyCancelButton.style.display = "inline";
          scopeKeyConfirmButton.style.color = "red";
        }
      </script>

      <h1>Hiera data store</h1>
      <p>This page shows the key/value pairs stored for each defined scope.

      <h1>Scopes</h1>
      <br/><br/>

      <f:repeatable name="scopes" noAddButton="true" items="${it.getScopes()}" var="scope">
        <div id="${scope}" class="scope-container">
          <table>
            <tr>
              <td class="scope-name">${scope}</td>
              <td class="scope-delete">
                <button id="${scope}-remove-button" onclick="deleteScope('${scope}')" class="danger delete delete-scope">Remove Scope</button>
                <button id="${scope}-confirm-button" onclick="confirmDeleteScope('${scope}')" class="danger delete delete-confirm">Confirm Delete</button>
                <button id="${scope}-cancel-button" onclick="cancelDeleteScope('${scope}')" class="danger delete delete-cancel">Cancel</button>
              </td>
            </tr>
          </table>

          <table class="scope-table table table-hover list-table">
            <thead>
              <tr>
                <th>Key</th>
                <th>Value</th>
                <th>Source Job</th>
                <th/>
              </tr>
            </thead>
            <tbody>
              <f:repeatable noAddButton="true" items="${it.getKeys(scope)}" var="key">
                <tr id="${scope}-${key}">
                  <td>
                    <strong>${key}</strong>
                  </td>
                  <td class="middle-cell">
                    ${it.getKeyValue(scope, key)}
                  </td>
                  <td class="middle-cell">
                    ${it.getKeySource(scope, key)}
                  </td>
                  <td class="key-pair-delete">
                    <button id="${scope}-${key}-remove-button" onclick="deleteKey('${key}','${scope}')" class="delete delete-key">Remove</button>
                    <button id="${scope}-${key}-confirm-button" onclick="confirmDeleteKey('${key}','${scope}')" class="delete delete-confirm">Confirm Delete</button>
                    <button id="${scope}-${key}-cancel-button" onclick="cancelDeleteKey('${key}','${scope}')" class="delete delete-cancel">Cancel</button>
                  </td>
                </tr>
              </f:repeatable>
            </tbody>
          </table>
        </div>
      </f:repeatable>

      <h1>How to use this plugin</h1>

      To define new scopes and key/value pairs, use the `puppet.hiera` in your pipeline groovy scripts.  For example:</p>
      <div class="codeblock">
      <pre class="prettyprint"><![CDATA[puppet.hiera scope: 'development', key: 'build-version', value: 'v1.0.1']]></pre>
      </div>
      <p>Using the hiera-http backend, you can specify an order to query scopes defined in Jenkins for
      a matching key. If the key is not found in the first scope, it will query the next until it has
      exhausted the list of scopes to query.</p>

      <p>Here is an example hiera-http configuration that should be placed in
      the hiera.yaml on the Puppet server. In this example, whenever a node
      makes a request for a key during catalog compilation, it will first
      look for the key in a scope that matches its certname, then look for
      the key in the scope that matches the node's virtualization
      platform, and finally look in a scope that matches the node's
      environment.</p>

      <p>If Jenkins is secured to have read access to only authenticated users,
      use HTTP authentication by setting the 'use_auth', 'auth_user', and
      'auth_pass' parameters. If unauthenticated requests have read-only
      access, the auth parameters are unnecessary.</p>

      <p>For more information on the hiera-http backend, go <a href="https://github.com/crayfishx/hiera-http">here</a></p>

      <div class="codeblock">
      <pre class="prettyprint"> <![CDATA[
:backends:
  - http
  - yaml

:http:
  :host: ${request.getServerName()}
  :port: ${request.getLocalPort()}
  :output: json
  :use_auth: true
  :auth_user: &ltuser&gt
  :auth_pass: &ltpassword&gt
  :cache_timeout: 10
  :failure: graceful
  :scopes:
    - "${rootURL}/hiera/lookup?scope=%{::trusted.certname}&key=%{key}"
    - "${rootURL}/hiera/lookup?scope=%{::virtual}&key=%{key}"
    - "${rootURL}/hiera/lookup?scope=%{::environment}&key=%{key}"
      ]]>
      </pre>
      </div>
    </l:main-panel>
  </l:layout>
</j:jelly>
